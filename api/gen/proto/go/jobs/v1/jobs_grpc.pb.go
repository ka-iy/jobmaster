// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: jobs.proto

package jobsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobService_Start_FullMethodName        = "/jobmaster.jobs.v1.JobService/Start"
	JobService_Stop_FullMethodName         = "/jobmaster.jobs.v1.JobService/Stop"
	JobService_Status_FullMethodName       = "/jobmaster.jobs.v1.JobService/Status"
	JobService_StreamOutput_FullMethodName = "/jobmaster.jobs.v1.JobService/StreamOutput"
)

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	// Start starts a job with the given creation parameters.
	// It returns a response with the details of the job which was created.
	Start(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*JobID, error)
	// Stop stops a job with the given JobID.
	// It returns a response with the details of the job which was stopped.
	// A client will only be able to stop its own jobs - i.e jobs which it
	// started. The superuser would be able to stop any job.
	Stop(ctx context.Context, in *JobIDRequest, opts ...grpc.CallOption) (*JobResponse, error)
	// Status gets the status of a job with the given ID.
	// It returns a response with the details of the job whose status was requested.
	// A client will only be able to view its own jobs - i.e jobs which it started.
	Status(ctx context.Context, in *JobIDRequest, opts ...grpc.CallOption) (*JobResponse, error)
	// StreamOutput streams the output (combined stdout and stderr) for the given job.
	// Jobs that have already outputted logs/output will have their entire output
	// streamed from the beginning up to the latest available output entry. If the job
	// has already exited, the stream will terminate after streaming the final available
	// output entry.
	StreamOutput(ctx context.Context, in *JobIDRequest, opts ...grpc.CallOption) (JobService_StreamOutputClient, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) Start(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := c.cc.Invoke(ctx, JobService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) Stop(ctx context.Context, in *JobIDRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, JobService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) Status(ctx context.Context, in *JobIDRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, JobService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StreamOutput(ctx context.Context, in *JobIDRequest, opts ...grpc.CallOption) (JobService_StreamOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[0], JobService_StreamOutput_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceStreamOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_StreamOutputClient interface {
	Recv() (*JobOutputResponse, error)
	grpc.ClientStream
}

type jobServiceStreamOutputClient struct {
	grpc.ClientStream
}

func (x *jobServiceStreamOutputClient) Recv() (*JobOutputResponse, error) {
	m := new(JobOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	// Start starts a job with the given creation parameters.
	// It returns a response with the details of the job which was created.
	Start(context.Context, *JobCreateRequest) (*JobID, error)
	// Stop stops a job with the given JobID.
	// It returns a response with the details of the job which was stopped.
	// A client will only be able to stop its own jobs - i.e jobs which it
	// started. The superuser would be able to stop any job.
	Stop(context.Context, *JobIDRequest) (*JobResponse, error)
	// Status gets the status of a job with the given ID.
	// It returns a response with the details of the job whose status was requested.
	// A client will only be able to view its own jobs - i.e jobs which it started.
	Status(context.Context, *JobIDRequest) (*JobResponse, error)
	// StreamOutput streams the output (combined stdout and stderr) for the given job.
	// Jobs that have already outputted logs/output will have their entire output
	// streamed from the beginning up to the latest available output entry. If the job
	// has already exited, the stream will terminate after streaming the final available
	// output entry.
	StreamOutput(*JobIDRequest, JobService_StreamOutputServer) error
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) Start(context.Context, *JobCreateRequest) (*JobID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobServiceServer) Stop(context.Context, *JobIDRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobServiceServer) Status(context.Context, *JobIDRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedJobServiceServer) StreamOutput(*JobIDRequest, JobService_StreamOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOutput not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Start(ctx, req.(*JobCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Stop(ctx, req.(*JobIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Status(ctx, req.(*JobIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StreamOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).StreamOutput(m, &jobServiceStreamOutputServer{stream})
}

type JobService_StreamOutputServer interface {
	Send(*JobOutputResponse) error
	grpc.ServerStream
}

type jobServiceStreamOutputServer struct {
	grpc.ServerStream
}

func (x *jobServiceStreamOutputServer) Send(m *JobOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobmaster.jobs.v1.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobService_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JobService_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOutput",
			Handler:       _JobService_StreamOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobs.proto",
}
